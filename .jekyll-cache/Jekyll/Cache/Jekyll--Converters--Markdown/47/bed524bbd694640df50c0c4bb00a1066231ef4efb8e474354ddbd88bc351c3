I"N<h2 id="문자열-계산기-구현">문자열 계산기 구현</h2>

<h4 id="기능-요구사항">기능 요구사항</h4>

<ul>
  <li>사용자가 입력한 문자열 값에 따라 사칙연산을 수행할 수 있는 계산기를 구현해야 한다.</li>
  <li>문자열 계산기는 사칙연산의 계산 우선순위가 아닌 입력 값에 따라 계산 순서가 결정된다. 즉, 수학에서는 곱셈, 나눗셈이 덧셈, 뺄셈 보다 먼저 계산해야 하지만 이를 무시한다.</li>
  <li>예를 들어 “2 + 3 * 4 / 2”와 같은 문자열을 입력할 경우 2 + 3 * 4 / 2 실행 결과인 10을 출력해야 한다.</li>
</ul>

<h4 id="프로그래밍-요구사항">프로그래밍 요구사항</h4>

<ul>
  <li>메소드가 너무 많은 일을 하지 않도록 분리하기 위해 노력해 본다.</li>
  <li>규칙 1: 한 메서드에 오직 한 단계의 들여쓰기(indent)만 한다.</li>
  <li>규칙 2: else 예약어를 쓰지 않는다.</li>
</ul>

<h2 id="문자열-계산기-구현-중-학습">문자열 계산기 구현 중 학습(?)</h2>

<blockquote>
  <p>if - else 문을 사용 하지 않는 이유</p>
</blockquote>

<ul>
  <li>else문 사용시 복잡성 증가 -&gt; else if 문 까지 비교를 해야 if 문이 끝남.</li>
  <li>한번에 이해하기 힘듬 -&gt; if 문이 쉽다는 느낌이 강함</li>
  <li>의사소통이 쉬움</li>
</ul>

<blockquote>
  <p>TDD란</p>
</blockquote>

<p>테스트를 먼저 만들고 테스트를 통과하기 위한 것을 짜는 것.</p>

<blockquote>
  <p>TDD가 필요한 상황</p>
</blockquote>

<ul>
  <li>나에 대한 불확실성이 높은 경우</li>
  <li>외부적 불확실성이 높은 경우</li>
  <li>개발하는 중에 코들 많이 바꿔야 하는 경우</li>
  <li>다른사람이 유지 보수를 할 경우</li>
</ul>

<blockquote>
  <p>효과</p>
</blockquote>

<ul>
  <li>피드백 증가</li>
  <li>남들에게 테스트 코드를 보여주고 그 코드를 직접 실행</li>
  <li>협력
    <ul>
      <li>남이 짠 코드 쉽고 빠르게 이해</li>
    </ul>
  </li>
  <li>불확실성에 대비</li>
  <li>버그를 줄일 수 있음.</li>
  <li>코드 복잡도가 떨어짐 -&gt; 클린 코드 -&gt; 유지보수 비용 감소</li>
</ul>

<blockquote>
  <p>단점</p>
</blockquote>

<ul>
  <li>개발 시간이 늘어남</li>
  <li>개발 방식을 바꿔야함</li>
</ul>

<blockquote>
  <p>Unit 사용법</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSum</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Calculator</span> <span class="n">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Calculator</span><span class="o">();</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>Test 클래스에서 <code class="highlighter-rouge">@Test</code> 와 메소드를 생성 -&gt; <code class="highlighter-rouge">assertEqulas();</code> 메소드를 이용하여 구현할 코드를 테스트</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Before</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringCalculator</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>test 코드를 사용하기 전에 미리 구현할 수 있는 메소드 <code class="highlighter-rouge">@before</code>, <code class="highlighter-rouge">public void setUp()</code> 사용</p>

<blockquote>
  <p><strong>소스코드</strong></p>
</blockquote>

<p>StringCalculator.java</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringCalculator</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">input</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isBlank</span><span class="o">(</span><span class="nc">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">" "</span><span class="o">)</span> <span class="o">||</span> <span class="n">input</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">makeResult</span><span class="o">(</span><span class="nc">String</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">isBlank</span><span class="o">(</span><span class="n">input</span><span class="o">))</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
        <span class="k">return</span> <span class="nf">calculateSplitedString</span><span class="o">(</span><span class="n">splitBlank</span><span class="o">(</span><span class="n">input</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">splitBlank</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">toInt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculateSplitedString</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">toInt</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">calculate</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="n">str</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">toInt</span><span class="o">(</span><span class="n">str</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]));</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="kt">int</span> <span class="n">firstValue</span><span class="o">,</span> <span class="kt">char</span> <span class="n">operator</span><span class="o">,</span> <span class="kt">int</span> <span class="n">secondValue</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">operator</span> <span class="o">==</span> <span class="sc">'+'</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">add</span><span class="o">(</span><span class="n">firstValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">operator</span> <span class="o">==</span> <span class="sc">'-'</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">subtract</span><span class="o">(</span><span class="n">firstValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">operator</span> <span class="o">==</span> <span class="sc">'*'</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">multiply</span><span class="o">(</span><span class="n">firstValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">operator</span> <span class="o">==</span> <span class="sc">'/'</span><span class="o">)</span>
            <span class="k">return</span> <span class="nf">divide</span><span class="o">(</span><span class="n">firstValue</span><span class="o">,</span> <span class="n">secondValue</span><span class="o">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">subtract</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">multiply</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">i</span> <span class="o">*</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">divide</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">i</span> <span class="o">/</span> <span class="n">j</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ArithmeticException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"숫자 0으로 나눌 수 없습니다."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">i</span> <span class="o">/</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>StringCalculatorTest</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.junit.Before</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringCalculatorTest</span> <span class="o">{</span>
    <span class="nc">StringCalculator</span> <span class="n">calculator</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">SetUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringCalculator</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testAdd</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSubtract</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">subtract</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMultiply</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">multiply</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDivide</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">divide</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testCalculate</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">makeResult</span><span class="o">(</span><span class="s">"1 + 2 * 4 / 2"</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="nc">ArithmeticException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDivideZero</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">calculator</span><span class="o">.</span><span class="na">divide</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">test</span><span class="err">계산</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">assertEquals</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">calculator</span><span class="o">.</span><span class="na">calculate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="sc">'+'</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="nc">RuntimeException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testIsBlankError</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">calculator</span><span class="o">.</span><span class="na">makeResult</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

:ET