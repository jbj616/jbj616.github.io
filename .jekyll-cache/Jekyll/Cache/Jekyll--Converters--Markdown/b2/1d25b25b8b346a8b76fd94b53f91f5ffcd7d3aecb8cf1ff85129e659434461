I">4<h2 id="문자열-덧셈-계산기">문자열 덧셈 계산기</h2>

<blockquote>
  <p>요구사항</p>
</blockquote>

<ul class="task-list">
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />쉼표(,) 또는 콜론(:)을 구분자로 가지는 문자열을 전달하는 경우 구분자를 기준으로 분리한 각 숫자의 합을 반환 (예: “” =&gt; 0, “1,2” =&gt; 3, “1,2,3” =&gt; 6, “1,2:3” =&gt; 6)</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />앞의 기본 구분자(쉼표, 콜론)외에 커스텀 구분자를 지정할 수 있다. 커스텀 구분자는 문자열 앞부분의 “//”와 “\n” 사이에 위치하는 문자를 커스텀 구분자로 사용한다. 예를 들어 “//;\n1;2;3”과 같이 값을 입력할 경우 커스텀 구분자는 세미콜론(;)이며, 결과 값은 6이 반환되어야 한다.</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />문자열 계산기에 숫자 이외의 값 또는 음수를 전달하는 경우 RuntimeException 예외를 throw한다</p>
  </li>
</ul>

<blockquote>
  <p>프로그래밍 요구사항</p>
</blockquote>

<ul>
  <li>indent(들여쓰기) depth를 2단계에서 1단계로 줄여라.
    <ul>
      <li>depth의 경우 if문을 사용하는 경우 1단계의 depth가 증가한다. if문 안에 while문을 사용한다면 depth가 2단계가 된다.</li>
    </ul>
  </li>
  <li>메소드의 크기가 최대 10라인을 넘지 않도록 구현한다.
    <ul>
      <li>method가 한 가지 일만 하도록 최대한 작게 만들어라.</li>
    </ul>
  </li>
  <li>else를 사용하지 마라.</li>
</ul>

<blockquote>
  <p>요구사항 힌트</p>
</blockquote>

<ul class="task-list">
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />빈 문자열 또는 null 값을 입력할 경우 0을 반환해야 한다.(예 : “” =&gt; 0, null =&gt; 0)</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />숫자 하나를 문자열로 입력할 경우 해당 숫자를 반환한다.(예 : “1”)</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />숫자 두개를 컴마(,) 구분자로 입력할 경우 두 숫자의 합을 반환한다.(예 : “1,2”)</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />구분자를 컴마(,) 이외에 콜론(:)을 사용할 수 있다. (예 : “1,2:3” =&gt; 6)</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />“//”와 “\n” 문자 사이에 커스텀 구분자를 지정할 수 있다. (예 : “//;\n1;2;3” =&gt; 6)</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />음수를 전달할 경우 RuntimeException 예외가 발생해야 한다. (예 : “-1,2,3”)</p>
  </li>
</ul>

<blockquote>
  <p>목표</p>
</blockquote>

<ul>
  <li>리팩토링 시간을 줄이자! (정해진 시간안에 구현)</li>
  <li>Test -&gt; 구현 순서</li>
  <li>stream or 람다식 사용</li>
</ul>

<h2 id="공부한-내용">공부한 내용</h2>

<blockquote>
  <p>Pattern, Matcher 클래스</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="err">'정규식'</span><span class="o">);</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="s">"문자열"</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>find()
    <ul>
      <li>Pattern에 일치하는 텍스트가 발견 되면 true</li>
    </ul>
  </li>
  <li>group()
    <ul>
      <li>패턴과 일치하는 텍스트를 반환</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>정규식</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th style="text-align: center">표현식</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">^</td>
      <td style="text-align: center">문자열의 시작</td>
    </tr>
    <tr>
      <td style="text-align: center">$</td>
      <td style="text-align: center">문자열의 종료</td>
    </tr>
    <tr>
      <td style="text-align: center">.</td>
      <td style="text-align: center">임의의 한 문자 (줄바꿈 제외)</td>
    </tr>
    <tr>
      <td style="text-align: center">[…]</td>
      <td style="text-align: center">[] 사이에 있는 문자 혹은 문자집합 (ex A-Z)</td>
    </tr>
    <tr>
      <td style="text-align: center">[^…]</td>
      <td style="text-align: center">[] 사이에 있는 문자 혹은 문자집합 제외</td>
    </tr>
    <tr>
      <td style="text-align: center">*</td>
      <td style="text-align: center">앞문자가 문자열일 많을수도 없을수도</td>
    </tr>
    <tr>
      <td style="text-align: center">+</td>
      <td style="text-align: center">앞 문자가 하나 이상</td>
    </tr>
    <tr>
      <td style="text-align: center">?</td>
      <td style="text-align: center">앞 문자가 없거나 하나</td>
    </tr>
    <tr>
      <td style="text-align: center">{}</td>
      <td style="text-align: center">횟수 또는 범위</td>
    </tr>
    <tr>
      <td style="text-align: center">\d</td>
      <td style="text-align: center">[0-9]</td>
    </tr>
  </tbody>
</table>

<p>더 많은 표현 : https://jamesdreaming.tistory.com/179</p>

<p><strong>자주 사용하는 거</strong></p>

<ol>
  <li>
    <p>숫자만 : <code class="highlighter-rouge">^[0-9]*$</code></p>
  </li>
  <li>
    <p>영문자만 : <code class="highlighter-rouge">^[a-zA-Z]*$</code></p>
  </li>
  <li>
    <p>한글만 : <code class="highlighter-rouge">^[가-힣]*$</code></p>
  </li>
  <li>
    <p>영어 &amp; 숫자만 : <code class="highlighter-rouge">^[a-zA-Z0-9]*$</code></p>
  </li>
  <li>
    <p>E-Mail : <code class="highlighter-rouge">^[a-zA-Z0-9]+@[a-zA-Z0-9]+$</code></p>
  </li>
  <li>
    <p>휴대폰 : <code class="highlighter-rouge">^01(?:0|1|[6-9]) - (?:\d{3}|\d{4}) - \d{4}$</code></p>
  </li>
  <li>
    <p>일반전화 : <code class="highlighter-rouge">^\d{2.3} - \d{3,4} - \d{4}$</code></p>
  </li>
  <li>
    <p>주민등록번호 : <code class="highlighter-rouge">\d{6} \- [1-4]\d{6}</code></p>
  </li>
  <li>
    <p>IP 주소 : <code class="highlighter-rouge">([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3}) \. ([0-9]{1,3})</code></p>
  </li>
</ol>

<p><code class="highlighter-rouge">"//;\n1;2;3"</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"//(.)\n(.*)"</span><span class="o">).</span><span class="na">matcher</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>
</code></pre></div></div>

<p>=&gt; <code class="highlighter-rouge">//</code>와 <code class="highlighter-rouge">\n</code> 사이의 문자가 식의 구분자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="c1">//group(2)는 1;2;3 group(1)은 ;</span>
</code></pre></div></div>

<blockquote>
  <p>Stream</p>
</blockquote>

<ul>
  <li>
    <p>mapToInt() : 객체 스트림을 기본 타입 스트림으로 변환 (Stream -&gt; IntStream)</p>
  </li>
  <li>
    <p>allMatch() : 모든 파라미터가 조건에 중촉되는지</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">str</span> <span class="o">=</span> <span class="o">{</span><span class="s">"1"</span><span class="o">,</span> <span class="s">"2"</span><span class="o">,</span> <span class="s">"3"</span><span class="o">};</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">str</span><span class="o">).</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">num</span><span class="o">)).</span><span class="na">allMatch</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
</code></pre></div></div>

<blockquote>
  <p>assertThat</p>
</blockquote>

<p>=&gt; 가독성 UP</p>

<ul>
  <li>isEqualTo = 동등</li>
</ul>

<p><code class="highlighter-rouge">assertThat(stringAddCalculator.calculate(null)).isEqualTo(0);</code></p>

<ul>
  <li>
    <p>contains</p>
  </li>
  <li>
    <p>startWith</p>
  </li>
  <li>
    <p>…</p>

    <p>더 많은 정보 : https://joel-costigliola.github.io/assertj/</p>
  </li>
</ul>

<p>##리뷰 받은 내용</p>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />변수를 줄여쓰지 않는다.</li>
</ul>

<p><code class="highlighter-rouge">StringAddCalculator cal;</code></p>

<ul class="task-list">
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />assertThat() 사용하기 (참고 https://joel-costigliola.github.io/assertj/ )</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="highlighter-rouge">java
Stream stream = Arrays.stream(str);
stream.mapToInt(num -&gt; Integer.parseInt(num)).allMatch(num -&gt; num &gt; 0);
</code></p>

    <p>stream을 선언하지 않고 한줄에 끝낼수있다.</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />무조건 stream을 사용하지말고 장점이 있는 경우에만 사용 =&gt; 이번엔 stream을 사용해 보고싶었음 다음부턴 효율적으로 적용</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Test 작성 -&gt; Test Fail -&gt; Test 통과할만큼의 간단한 구현 -&gt; 중복제거 리팩토링 -&gt; 다른 요구사항 test 작성 -&gt; … 무한반복</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Scanner 생성 비용이 높아 메소드에서 생성하는 것보단 매개변수로 받는게 좋음 =&gt; threadSafe문제</p>
  </li>
  <li class="task-list-item">
    <p><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />변수명에 자료형 이름이 오지 않는다.</p>
  </li>
</ul>

<h2 id="힘든점">힘든점</h2>

<ul>
  <li>정규식 표현을 읽기 힘들었다.
    <ul>
      <li>정규식 사용 이유 : 코딩 시간절약, 특정 문자나 문자열 검색등등</li>
      <li>단점  : 가독성 떨어짐.</li>
    </ul>
  </li>
  <li>저번보다 리팩토링 시간을 줄였음.</li>
  <li>test 작성 -&gt; 구현 -&gt; 리팩토링 순서</li>
  <li>추가 요구 사항 (선택)
    <ul>
      <li>1번 (positive 객체 사용) =&gt; stream 사용할 아이디어가 생각이안남</li>
      <li>2번 (Inteface를 사용하여 Splitter 구현) =&gt; interface 사용시 오버라이딩 때문에 static 메소드 사용할 수 없어서 더 복잡해졌음.</li>
      <li>3번 (람다식 사용) =&gt; 이번 과제는 람다식 (Stream) 중심으로 구현</li>
    </ul>
  </li>
</ul>

<p>소스 코드 : <a href="https://github.com/sproutt/spring-study-lotto/pull/11/files">https://github.com/sproutt/spring-study-lotto/pull/11/files</a></p>

:ET